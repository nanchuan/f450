void main(void)
{
  MPU6050DMPDATA;
  float quatf[4];
  int Pitch,Roll,Yaw;//quati[4],
  int pidout1 = 0,pidout2 = 0,pidout3 = 0;//;//;
  long error1 = 0,error2 = 0,error3 = 0;  
  int pwm1,pwm2,pwm3,pwm4;
  
  Clock_Init();   //20mhz
  Timera0_Init(TA0US);        //0-65535(us)
  Timera1_Init(TA1US);          //0-65535(us)
//  Uart1_Init(); //9600  
   
//  Lcd_Init();   //5110LCD
//  Lcd_String(36,5,"luyuexin");
//  Uart1_Send_String("luyuexin");
  Led_Init();
  Key_Init();Key_IE();
  
  Pwm_Init(); 
  Pwm_Com(Pwm_max,Pwm_max,Pwm_max,Pwm_max);
//  TA0CCR1 = Pwm_max+ 200;TA0CCR2 = Pwm_max+ 200;
//  TA0CCR3 = Pwm_max+ 200;TA0CCR4 = Pwm_max+ 200;
  delay_ms(1000);  
  
  Flash_read(flashd,Flash_ptr,FLASHL);
  Flash_r();
  
  while(mpu605dmp_init());
  Nrf_Init();
  Pwm_Com(Pwm_min,Pwm_min,Pwm_min,Pwm_min);
//  delay_ms(1000);
  point4 = Pwm_min;
  Mark |= PIDC+ ERROR+ NRFIQ; Led3_0();// 
  
  _BIS_SR(GIE); 
  
  while(1)
  {  
    if(Mark&NRFIQ)
    {
      Mark &=~NRFIQ;
      if((RX_DR)& Nrf_Check_Event(rxbuf))//Rx_read(rxbuf)
      { 
        switch(rxbuf[0]){
        case 1:
          point4 = rxbuf[1]*256+ rxbuf[2];
          point4 += Pwm_min;
          point3 = rxbuf[3]*256+ rxbuf[4];
          point2 = rxbuf[5]*256+ rxbuf[6];
          point1 = rxbuf[7]*256+ rxbuf[8];
          break;
        case 2:
          Flash_w();
          Flash_write(flashd,Flash_ptr,FLASHL);
          Led1_01();
          break;
        case 3:
          Mark &= ~ERROR;
          Led3_1();
          break;
        case 4:
          Mark |= ERROR;
          Led3_0();
          break;
        case 5:
          if(Mark&ERROR){
            while(mpu605dmp_init());
          }
          break;
        case 6:
          KP = rxbuf[1];
          KI = rxbuf[2];
          KD = rxbuf[3];
          KPZ = rxbuf[4];
          KDZ = rxbuf[5];
          Led1_01();
          break;
        default:
          break;
        }rxbuf[0] = 0;
        tt++;        
      }
    }//if(Mark&NRFIQ)
    
    dmp_read_fifo(gyro,accel,quatl,&sensors,&more);//    
    
    if( sensors & INV_WXYZ_QUAT )
    {      
      if((Mark&TA0Mark))
      {//
        Mark &=~TA0Mark;
        quatf[0] = quatl[0]/q30;
        quatf[1] = quatl[1]/q30;
        quatf[2] = quatl[2]/q30;
        quatf[3] = quatl[3]/q30;
        Roll  = (int)(asin(2*q1*q3- 2*q0*q2)*573.14); //roll -90~90
        Pitch = (int)(atan2(2*q2*q3+ 2*q0*q1, -2*q1*q1- 2*q2*q2+ 1)*573.14); //pitch -180~180
        Yaw = (int)(atan2(2*(q1*q2+ q0*q3),q0*q0+ q1*q1- q2*q2- q3*q3)*573.14); //-180~180
        if((Pitch>400)||(Roll>400)||(Pitch<-400)||(Roll<-400))
        {
          Mark |= ERROR;
          Led3_0();
        }
        if(!(Mark&ERROR))
        { 
          error1 = point1- Pitch;
          pst1 += error1;
          pidout1 = (error1*KP+ pst1*KI- (long)gyro[0]*KD)/100;
          
          error2 = point2- Roll;
          pst2 += error2;
          pidout2 = (error2*KP+ pst2*KI+ (long)gyro[1]*KD)/100;
          
          error3 = point3- Yaw;
          pidout3 = (error3*KPZ- (long)gyro[2]*KDZ)/100;
          pwm1 = point4- pidout2+ pidout3;
          pwm2 = point4+ pidout1- pidout3;
          pwm3 = point4+ pidout2+ pidout3;
          pwm4 = point4- pidout1- pidout3;
          Pwm_Com(pwm1,pwm2,pwm3,pwm4);
//          Pwm_Com(point4,point4,point4,point4);
        }
        else{
//          if(point4>(Pwm_max+Pwm_min)/2)
            Pwm_Com(Pwm_min,Pwm_min,Pwm_min,Pwm_min);
//            point4 = Pwm_min;
        }        
      }//if((Mark&TA0Mark))
      if((Mark&TA1Mark))
      {
        Mark &=~TA1Mark;
        
        if(Mark&KEYIQ){
          Mark &=~KEYIQ;
          Mark |= ERROR;
        }        
        
        if(Mark&PIDC){
          Mark &=~PIDC;
//          scop_RAM(txbuf,23,(float)KP,(float)KI,(float)KD);
          ANO_scopdatAC(txbuf,KP,KI,KD,KP,KI,KD,KPZ,0,KDZ);
        }
//        else if(Mark&PIDZC){
//          Mark &=~PIDZC;
//          scop_RAM(txbuf,26,(float)KPZ,0,(float)KDZ);
//        }
//        else if(Mark&POINTS){
//          Mark &=~POINTS;
//          scop_point(txbuf,(float)point4,(float)point1,(float)point2,(float)point3);
////          scop_RAM(txbuf,26,gyro[0],gyro[1],gyro[2]);
//        }
        else if(ta1_tmp%2){
          ANO_scopdatAF(txbuf,(int*)accel,(int*)gyro,Roll*10,Pitch*10,Yaw);
        }
        else{
//          scop_quat(txbuf,quatf); 
          ANO_scopdatAE(txbuf,point4-500,point3+1500,point2+1500,point1+1500,
                        (pwm1-Pwm_min)/10,(pwm2-Pwm_min)/10,(pwm3-Pwm_min)/10,(pwm4-Pwm_min)/10);
        }
        NRF_TxPacket(txbuf,32);
        Led2_01();
        ta1_tmp++;
        if(ta1_tmp>=20){
          ta1_tmp = 0;
//          point1 = point2 = 0;
          if(0==tt){
            Mark |= ERROR;Led3_0();
          }tt = 0;
        }
      }//if((Mark&TA1Mark))      
    }//if( sensors & INV_WXYZ_QUAT )
  //    Pitch  = asin(2 * q1 * q3 - 2 * q0* q2)* 57.3; // pitch
  //    Roll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
  //    Yaw = atan2(2*(q1*q2 + q0*q3),q0*q0+q1*q1-q2*q2-q3*q3) * 57.3; 
  }//while(1)
}


void Flash_w(void)
{
  flashd[0] = KP;
  flashd[1] = KI;
  flashd[2] = KD;
  flashd[3] = KPZ;
//  flashd[4] = KI;
  flashd[5] = KDZ;
//  flashd[6] = (gyrost[0]>>16);
//  flashd[7] = (gyrost[0]);
//  flashd[8] = (gyrost[1]>>16);
//  flashd[9] = (gyrost[1]);
//  flashd[10] = (gyrost[2]>>16);
//  flashd[11] = (gyrost[2]);
//  flashd[12] = (accelst[0]>>16);
//  flashd[13] = (accelst[0]);
//  flashd[14] = (accelst[1]>>16);
//  flashd[15] = (accelst[1]);
//  flashd[16] = (accelst[2]>>16);
//  flashd[17] = (accelst[2]);
}

void Flash_r(void)
{
  KP = flashd[0];
  KI = flashd[1];
  KD = flashd[2];
  KPZ = flashd[3];
//  KI = flashd[4];
  KDZ = flashd[5];
//  gyrost[0] = (long)flashd[6]<<16 | flashd[7];
//  gyrost[1] = (long)flashd[8]<<16 | flashd[9];
//  gyrost[2] = (long)flashd[10]<<16 | flashd[11];
//  accelst[0] = (long)flashd[12]<<16 | flashd[13];
//  accelst[1] = (long)flashd[14]<<16 | flashd[15];
//  accelst[2] = (long)flashd[16]<<16 | flashd[17];
}


#pragma vector=TIMER0_A0_VECTOR
__interrupt void Timera0_0(void)
{
  Mark |= TA0Mark;  
}

//定时器 a1 中断
#pragma vector=TIMER1_A0_VECTOR
__interrupt void Timera1_0(void)
{  
  Mark |= TA1Mark;  
}

//串口1中断
uchar urat_temp;
#pragma vector=USCI_A1_VECTOR
__interrupt void uart1(void)
{  
  if(UCA1IFG&UCRXIFG)
  {
    urat_temp = UCA1RXBUF;
//    Uart1_Send_Char(urat_temp);
    UCA1IFG &= ~UCRXIFG;
  }
}

//p1中断
#pragma vector = PORT1_VECTOR 
__interrupt void Port1(void)
{
  if(P1IFG&key1){
    Mark |= KEYIQ;
    P1IFG &=~key1;
  }
}

//p2中断
#pragma vector = PORT2_VECTOR 
__interrupt void Port2(void)
{
  if(P2IFG&BIT0){
    Mark |= NRFIQ;
    P2IFG &=~BIT0;
  }
}


/*
void Contr_Check(){
  
    if((RX_DR)& Nrf_Check_Event(rxbuf))//Rx_read(rxbuf)
    { 
      switch(rxbuf[0]){
      case 1:
        if(Mark&ERROR){
          while(mpu605dmp_init());
          NRF_Write_Reg(FLUSH_RX,0xff);
        }
        else{
          point4++;
        } 
        Led1_01();
        break;
      case 5:
        if(Mark&ERROR){
        }
        else{
          point4--;
        }  
        Led1_01();
        break;
      case 2:
        if(Mark&ERROR){
        }
        else{
          point2 = 50;
        }
        Led1_01();
        break;
      case 6:
        if(Mark&ERROR){
        }
        else{
          point2 = -50;
        }
        Led1_01();
        break;      
      case 3:
        if(Mark&ERROR){
          KPZ++;Mark |= PIDC;
        }
        else{
          point1 = -50;
        }        
        Led1_01();
        break;
      case 4:
        if(Mark&ERROR){
          KDZ++;Mark |= PIDC;
        }
        else{
          point1 = 50;   
        }     
        Led1_01();
        break;
      case 7:
        if(Mark&ERROR){
          KPZ--;Mark |= PIDC;    
        } 
        else{
          point3+=10;
          if(point3>900){
            point3 = -900;
          }
        }  
        Led1_01();
        break;
      case 8:
        if(Mark&ERROR){
          KDZ--;Mark |= PIDC;  
        }
        else{
          point3-=10;
          if(point3<-900){
            point3 = 900;
          }
        }
        Led1_01();
        break;
      case 9:
        if(Mark&ERROR){
          KP++;Mark |= PIDC;   
        }
        else{
          point4+=10;
        }     
        Led1_01();
        break;
      case 10:
        if(Mark&ERROR){
          KI++;Mark |= PIDC;
        }
        Led1_01();
        break;
      case 11:
        if(Mark&ERROR){
          KD++;Mark |= PIDC;
        }
        Led1_01();
        break;
      case 13:
        if(Mark&ERROR){
          KP--;Mark |= PIDC;
        }
        else{
          point4-=10;
        }
        Led1_01();
        break;
      case 14:
        KI--;Mark |= PIDC;
        Led1_01();
        break;
      case 15:
        if(Mark&ERROR){
          KD--;Mark |= PIDC;
        }
        Led1_01();
        break;
      case 12:
        if(!delay_t)
        {
          Flash_w();
          Flash_write(flashd,Flash_ptr,FLASHL);
          delay_t = 100;
          Led1_01();
        }
        break;
      case 16:
        if(!delay_t)
        {
          if(Mark&ERROR){
            Mark &= ~ERROR;Led3_1();
          }
          else{
            Pwm_Com(Pwm_min,Pwm_min,Pwm_min,Pwm_min);
            point4 = Pwm_min;
            pst1 = 0;
            pst2 = 0;
            point3 = 0;           
            Mark |= ERROR;Led3_0();
          }delay_t = 100;
          Led1_01();
        }
        break;
      default:
        point1 = point2 = 0;
        break;
      }rxbuf[0] = 0;
      tt++;
    } 
}

*/
